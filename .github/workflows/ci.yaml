name: CI

env:
  NODE_VERSION: "21.x"
  FOLDER: ~/applications/prisma-test
  IMAGE: brightky/prisma-test
  IMAGE_VERSION: latest
  DOCKER_NETWORK_NAME: myNet

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  clean-docker:
    runs-on: ubuntu-latest
    steps:
        - name: Clean postgres
          uses: appleboy/ssh-action@v1.0.3
          with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            port: 22
            script: |
                docker kill db || true
        - name: Clean postgres
          uses: appleboy/ssh-action@v1.0.3
          with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            port: 22
            script: |
                docker kill app || true
  create-folder:
    runs-on: ubuntu-latest
    steps:
      - name: Create folder
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            rm -rf ${{ env.FOLDER }}
            mkdir -p  ${{ env.FOLDER }}
            chmod ugo+rwx  ${{ env.FOLDER }}

  create-docker-network:
    runs-on: ubuntu-latest
    steps:
      - name: create docker network
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            docker network rm ${{ env.DOCKER_NETWORK_NAME }} ; true
            docker network create ${{ env.DOCKER_NETWORK_NAME }}

  init-postgres:
    runs-on: ubuntu-latest
    needs: [clean-docker,create-docker-network]
    steps:
      - name: Initialize PostgreSQL
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            docker run -d -p 5432:5432 --name db --network ${{ env.DOCKER_NETWORK_NAME }} -e POSTGRES_PASSWORD=12345678 -e POSTGRES_USER=root -e POSTGRES_DB=root postgres:latest

  copy-files:
    runs-on: ubuntu-latest
    needs: [create-folder]
    steps:
      - uses: actions/checkout@v4
      - name: copy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "*"
          target: ${{ env.FOLDER }}

  dockerize:
    runs-on: ubuntu-latest
    needs: [clean-docker,copy-files,init-postgres]
    steps:
      - name: dockerize
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd ${{ env.FOLDER }}
            docker build -t ${{ env.IMAGE }}:${{ env.IMAGE_VERSION }} .
            docker push ${{ env.IMAGE }}:${{ env.IMAGE_VERSION }}

#   init-prisma:
#     runs-on: ubuntu-latest
#     needs: [init-postgres]
#     steps:
#       - name: init prisma
#         uses: appleboy/ssh-action@v1.0.3
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           port: 22
#           script: |
#             cd ${{ env.FOLDER }}
#             docker push ${{ env.IMAGE }}:${{ env.IMAGE_VERSION }}

  run-app:
    runs-on: ubuntu-latest
    needs: [dockerize]
    steps:
      - name: run app
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            docker run -d --network ${{ env.DOCKER_NETWORK_NAME }} -t app ${{ env.IMAGE }}:${{ env.IMAGE_VERSION }}
